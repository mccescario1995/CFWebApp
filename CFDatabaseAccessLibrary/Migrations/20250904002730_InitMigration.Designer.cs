// <auto-generated />
using System;
using CFDatabaseAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CFDatabaseAccessLibrary.Migrations
{
    [DbContext(typeof(CFContext))]
    [Migration("20250904002730_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("companyname");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phonenumber");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("Status", "IsDelete");

                    b.ToTable("feedback_companies");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("companyid");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("departmentname");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Status", "IsDelete");

                    b.ToTable("feedback_departments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedbackid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("filename");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("filepath");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("filesize");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mimetype");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("uploadedat");

                    b.Property<int>("UploadedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("uploadedbyuserid");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("feedback_attachments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("categoryname");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("colorcode");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("Status", "IsDelete");

                    b.ToTable("feedback_categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Bug Report",
                            ColorCode = "#DC2626",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Software bugs and issues",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Feature Request",
                            ColorCode = "#059669",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "New feature suggestions",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Performance",
                            ColorCode = "#D97706",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Performance related issues",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "User Interface",
                            ColorCode = "#7C3AED",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "UI/UX related feedback",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Documentation",
                            ColorCode = "#0891B2",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Documentation improvements",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "General",
                            ColorCode = "#6B7280",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "General feedback and suggestions",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackPriorities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("colorcode");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("int")
                        .HasColumnName("prioritylevel");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("priorityname");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("Status", "IsDelete");

                    b.ToTable("feedback_priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorCode = "#DC2626",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Critical issue requiring immediate attention",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityLevel = 1,
                            PriorityName = "Critical",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            ColorCode = "#EA580C",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "High priority issue",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityLevel = 2,
                            PriorityName = "High",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 3,
                            ColorCode = "#D97706",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Medium priority issue",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityLevel = 3,
                            PriorityName = "Medium",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 4,
                            ColorCode = "#65A30D",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Low priority issue",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityLevel = 4,
                            PriorityName = "Low",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 5,
                            ColorCode = "#0891B2",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Feature enhancement request",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityLevel = 5,
                            PriorityName = "Enhancement",
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackStatusHistories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("changereason");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("changedat");

                    b.Property<int>("ChangedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("changedbyuserid");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedbackid");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<int>("NewStatusId")
                        .HasColumnType("int")
                        .HasColumnName("newstatusid");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("notes");

                    b.Property<int?>("OldStatusId")
                        .HasColumnType("int")
                        .HasColumnName("oldstatusid");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("OldStatusId");

                    b.HasIndex("FeedbackId", "ChangedAt");

                    b.ToTable("feedback_statushistories");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("colorcode");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<byte>("IsDefault")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdefault");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<byte>("IsFinalStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("isfinalstatus");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("statusname");

                    b.HasKey("Id");

                    b.HasIndex("Status", "IsDelete");

                    b.ToTable("feedback_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorCode = "#3B82F6",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "New feedback submitted",
                            IsDefault = (byte)1,
                            IsDelete = (byte)0,
                            IsFinalStatus = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1,
                            StatusName = "Open"
                        },
                        new
                        {
                            Id = 2,
                            ColorCode = "#F59E0B",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Feedback is being worked on",
                            IsDefault = (byte)0,
                            IsDelete = (byte)0,
                            IsFinalStatus = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            ColorCode = "#8B5CF6",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Waiting for review",
                            IsDefault = (byte)0,
                            IsDelete = (byte)0,
                            IsFinalStatus = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1,
                            StatusName = "Pending Review"
                        },
                        new
                        {
                            Id = 4,
                            ColorCode = "#10B981",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Feedback has been resolved",
                            IsDefault = (byte)0,
                            IsDelete = (byte)0,
                            IsFinalStatus = (byte)1,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1,
                            StatusName = "Resolved"
                        },
                        new
                        {
                            Id = 5,
                            ColorCode = "#6B7280",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Feedback is closed",
                            IsDefault = (byte)0,
                            IsDelete = (byte)0,
                            IsFinalStatus = (byte)1,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1,
                            StatusName = "Closed"
                        },
                        new
                        {
                            Id = 6,
                            ColorCode = "#EF4444",
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Feedback was rejected",
                            IsDefault = (byte)0,
                            IsDelete = (byte)0,
                            IsFinalStatus = (byte)1,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = (byte)1,
                            StatusName = "Rejected"
                        });
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Feedbacks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("affectedversion");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("int")
                        .HasColumnName("assignedtouserid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryid");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int")
                        .HasColumnName("priorityid");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("resolutionnotes");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("resolvedat");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusid");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("submittedat");

                    b.Property<int>("SubmittedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("submittedbyuserid");

                    b.Property<int?>("SystemProjectId")
                        .HasColumnType("int")
                        .HasColumnName("systemprojectid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SystemProjectId");

                    b.HasIndex("AssignedToUserId", "StatusId");

                    b.HasIndex("CategoryId", "PriorityId");

                    b.HasIndex("Status", "IsDelete");

                    b.HasIndex("StatusId", "SubmittedAt");

                    b.HasIndex("SubmittedByUserId", "SubmittedAt");

                    b.ToTable("feedback_feedbacks");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.InternalNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUser")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuser");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedbackid");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<byte>("IsVisible")
                        .HasColumnType("tinyint")
                        .HasColumnName("isvisible");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notecontent");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUser");

                    b.HasIndex("FeedbackId");

                    b.ToTable("feedback_internalnotes");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rolename");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("feedback_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "System Administrator with full access",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleName = "Admin",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Support staff who handle feedback",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleName = "Support",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserId = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Customer who can submit feedback",
                            IsDelete = (byte)0,
                            ModifiedByUserId = 1,
                            ModifiedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleName = "Customer",
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.SystemProjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("companyid");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("projectname");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Status", "IsDelete");

                    b.ToTable("feedback_systemprojects");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserAddresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("postalcode");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("stateprovince");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("streetaddress");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("userprofileid");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("feedback_useraddresses");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserEmployments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enddate");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("position");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("startdate");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("userprofileid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("feedback_useremployments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserProfiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("bio");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("companyid");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("department");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("jobtitle");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profileimageurl");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("Status", "IsDelete");

                    b.ToTable("feedback_userprofiles");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("assignedat");

                    b.Property<int?>("AssignedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("assignedbyuserid");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleid");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("feedback_userroles");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("firstname");

                    b.Property<byte>("IsDelete")
                        .HasColumnType("tinyint")
                        .HasColumnName("isdelete");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastloginat");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("lastname");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifieddate");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phonenumber");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Status", "IsDelete", "CreatedDate");

                    b.ToTable("feedback_users");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Departments", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Companies", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackAttachments", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Feedbacks", "Feedback")
                        .WithMany("Attachments")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackStatusHistories", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "ChangedByUser")
                        .WithMany("StatusHistories")
                        .HasForeignKey("ChangedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.Feedbacks", "Feedback")
                        .WithMany("StatusHistory")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.FeedbackStatuses", "NewStatus")
                        .WithMany("StatusHistories")
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.FeedbackStatuses", "OldStatus")
                        .WithMany()
                        .HasForeignKey("OldStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChangedByUser");

                    b.Navigation("Feedback");

                    b.Navigation("NewStatus");

                    b.Navigation("OldStatus");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Feedbacks", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "AssignedToUser")
                        .WithMany("AssignedFeedback")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CFDatabaseAccessLibrary.Models.FeedbackCategories", "Category")
                        .WithMany("Feedback")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.FeedbackPriorities", "Priority")
                        .WithMany("Feedback")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.FeedbackStatuses", "FeedbackStatus")
                        .WithMany("Feedback")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "SubmittedByUser")
                        .WithMany("SubmittedFeedback")
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.SystemProjects", "SystemProject")
                        .WithMany("Feedback")
                        .HasForeignKey("SystemProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedToUser");

                    b.Navigation("Category");

                    b.Navigation("FeedbackStatus");

                    b.Navigation("Priority");

                    b.Navigation("SubmittedByUser");

                    b.Navigation("SystemProject");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.InternalNotes", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "CreatedByUserNavigation")
                        .WithMany("InternalNotes")
                        .HasForeignKey("CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.Feedbacks", "Feedback")
                        .WithMany("InternalNotes")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUserNavigation");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.SystemProjects", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Companies", "Company")
                        .WithMany("SystemProjects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserAddresses", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.UserProfiles", "UserProfile")
                        .WithOne("UserAddress")
                        .HasForeignKey("CFDatabaseAccessLibrary.Models.UserAddresses", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserEmployments", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Departments", "Department")
                        .WithMany("UserEmployments")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("CFDatabaseAccessLibrary.Models.UserProfiles", "UserProfile")
                        .WithOne("UserEmployment")
                        .HasForeignKey("CFDatabaseAccessLibrary.Models.UserEmployments", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserProfiles", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Companies", "Company")
                        .WithMany("UserProfiles")
                        .HasForeignKey("CompanyId");

                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("CFDatabaseAccessLibrary.Models.UserProfiles", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserRoles", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CFDatabaseAccessLibrary.Models.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Companies", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("SystemProjects");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Departments", b =>
                {
                    b.Navigation("UserEmployments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackCategories", b =>
                {
                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackPriorities", b =>
                {
                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackStatuses", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("StatusHistories");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Feedbacks", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("InternalNotes");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Roles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.SystemProjects", b =>
                {
                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserProfiles", b =>
                {
                    b.Navigation("UserAddress");

                    b.Navigation("UserEmployment");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Users", b =>
                {
                    b.Navigation("AssignedFeedback");

                    b.Navigation("InternalNotes");

                    b.Navigation("StatusHistories");

                    b.Navigation("SubmittedFeedback");

                    b.Navigation("UserProfile");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
