// <auto-generated />
using System;
using CFDatabaseAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CFDatabaseAccessLibrary.Migrations
{
    [DbContext(typeof(CFContext))]
    partial class CFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("companycode");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("companyname");

                    b.Property<string>("CompanySize")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("companysize");

                    b.Property<int>("Createdbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("industry");

                    b.Property<byte>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isdelete");

                    b.Property<int>("Modefiedbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("modefiedbyuserid");

                    b.Property<DateTime>("Modefieddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modefieddate");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("feedback_companies");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("companyid");

                    b.Property<int>("Createdbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("departmentcode");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("departmentname");

                    b.Property<byte>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isdelete");

                    b.Property<int?>("ManagerUserId")
                        .HasColumnType("int")
                        .HasColumnName("manageruserid");

                    b.Property<int>("Modefiedbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("modefiedbyuserid");

                    b.Property<DateTime>("Modefieddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modefieddate");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ManagerUserId");

                    b.ToTable("feedback_departments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("comment");

                    b.Property<int>("Createdbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedbackid");

                    b.Property<byte>("IsInternal")
                        .HasColumnType("tinyint")
                        .HasColumnName("isinternal");

                    b.Property<byte>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isdelete");

                    b.Property<int>("Modefiedbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("modefiedbyuserid");

                    b.Property<DateTime>("Modefieddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modefieddate");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback_feedbackcomments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Feedbacks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("int")
                        .HasColumnName("assignedtouserid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category");

                    b.Property<int>("Createdbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("FeedbackStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("feedbackstatus");

                    b.Property<byte>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isdelete");

                    b.Property<int>("Modefiedbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("modefiedbyuserid");

                    b.Property<DateTime>("Modefieddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modefieddate");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("priority");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("subject");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("feedback_feedbacks");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Createdbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<byte>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isdelete");

                    b.Property<int>("Modefiedbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("modefiedbyuserid");

                    b.Property<DateTime>("Modefieddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modefieddate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("feedback_roles");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserAddresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("addresstype");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<int>("Createdbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<byte>("IsPrimary")
                        .HasColumnType("tinyint")
                        .HasColumnName("isprimary");

                    b.Property<byte>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isdelete");

                    b.Property<int>("Modefiedbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("modefiedbyuserid");

                    b.Property<DateTime>("Modefieddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modefieddate");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("postalcode");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("state");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("feedback_useraddresses");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserEmployments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("companyid");

                    b.Property<int>("Createdbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentid");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("employeeid");

                    b.Property<byte>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isdelete");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("jobtitle");

                    b.Property<int>("Modefiedbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("modefiedbyuserid");

                    b.Property<DateTime>("Modefieddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modefieddate");

                    b.Property<string>("Startdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("startdate");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("feedback_useremployments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserProfiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Createdbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firstname");

                    b.Property<byte>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isdelete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastname");

                    b.Property<int>("Modefiedbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("modefiedbyuserid");

                    b.Property<DateTime>("Modefieddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modefieddate");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("profileimageurl");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("feedback_userprofiles");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Createdbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime>("Createddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<byte>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isdelete");

                    b.Property<int>("Modefiedbyuserid")
                        .HasColumnType("int")
                        .HasColumnName("modefiedbyuserid");

                    b.Property<DateTime>("Modefieddate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modefieddate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleid");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("feedback_users");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Departments", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Companies", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "ManagerUser")
                        .WithMany()
                        .HasForeignKey("ManagerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("ManagerUser");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.FeedbackComments", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Feedbacks", "Feedback")
                        .WithMany("FeedbackComments")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Feedbacks", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserAddresses", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserEmployments", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Companies", "Company")
                        .WithMany("UserEmployments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CFDatabaseAccessLibrary.Models.Departments", "Department")
                        .WithMany("UserEmployments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "User")
                        .WithOne("UserEmployment")
                        .HasForeignKey("CFDatabaseAccessLibrary.Models.UserEmployments", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.UserProfiles", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Users", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("CFDatabaseAccessLibrary.Models.UserProfiles", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Users", b =>
                {
                    b.HasOne("CFDatabaseAccessLibrary.Models.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Companies", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("UserEmployments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Departments", b =>
                {
                    b.Navigation("UserEmployments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Feedbacks", b =>
                {
                    b.Navigation("FeedbackComments");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CFDatabaseAccessLibrary.Models.Users", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserEmployment")
                        .IsRequired();

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
